<?xml version="1.0"?>
<clientConfig version="1.2">
    <emailProvider id="{{ ACF_DOMAIN }}">
      <domain>{{ domain }}</domain>
      <!-- <domain>example.net</domain> -->
      <displayName>{{ ACF_DESC }}</displayName>
      <displayShortName>{{ ACF_DESC }}</displayShortName>

      <!-- type=
          "imap": IMAP
          "pop3": POP3
          "jmap": JMAP
          -->
      <incomingServer type="{{ ACF_INCOMING_TYPE }}">
        <hostname>{{ ACF_INCOMING_SERVER }}</hostname>
        <port>{{ SCF_INCOMING_PORT }}</port>
          <!-- "plain": no encryption
                "SSL": SSL 3 or TLS 1 on SSL-specific port
                "STARTTLS": on normal plain port and mandatory upgrade to TLS via STARTTLS
                -->
        <socketType>{{ ACF_INCOMING_ENC }}</socketType>
        <username>{{ ACF_INCOMING_UNAME }}</username>
            <!-- Authentication methods:
                "password-cleartext",
                          Send password in the clear
                          (dangerous, if SSL isn't used either).
                          AUTH PLAIN, LOGIN or protocol-native login.
                "password-encrypted",
                          A secure encrypted password mechanism.
                          Can be CRAM-MD5 or DIGEST-MD5. Not NTLM.
                "NTLM":
                          Use NTLM (or NTLMv2 or successors),
                          the Windows login mechanism.
                "GSSAPI":
                          Use Kerberos / GSSAPI,
                          a single-signon mechanism used for big sites.
                "client-IP-address":
                          The server recognizes this user based on the IP address.
                          No authentication needed, the server will require no username nor password.
                "TLS-client-cert":
                          On the SSL/TLS layer, the server requests a client certificate and the client sends one (possibly after letting the user select/confirm one), if available.
                "OAuth2":
                          mAuth. Should be added only as second alternative.
                "none":
                          No authentication
                -->
        <authentication>{{ACF_INCOMING_AUTH }}</authentication>
<!---        <pop3> -->
            <!-- remove the following and leave to client/user? -->
<!--            <leaveMessagesOnServer>true</leaveMessagesOnServer>
            <downloadOnBiff>true</downloadOnBiff>
            <daysToLeaveMessagesOnServer>14</daysToLeaveMessagesOnServer> -->
            <!-- only for servers which don't allow checks more often -->
<!--            <checkInterval minutes="15"/>--><!-- not yet supported -->
<!--        </pop3> -->
        <!--- <password>optional: the user's password</password> -->
      </incomingServer>

      <!-- You can have multiple incoming servers,
        and even multiple IMAP server configs.
        The first config is the preferred one, but the user or
        or client can choose the alternative configs. -->
      <!-- <incomingServer type="jmap">
        <hostname>jmap.example.com</hostname>
        <port>443</port>
        <socketType>SSL</socketType>
        <username>%EMAILADDRESS%</username>
        <authentication>http-basic</authentication>
        <password>optional: the user's password</password>
      </incomingServer> -->

      <outgoingServer type="{{ ACF_OUTGOING_TYPE }}">
        <hostname>{{ ACF_OUTGOING_SERVER }}</hostname>
        <port>{{ ACF_OUTGOING_SERVER }}</port>
        <socketType>{{ ACF_OUTGOING_ENC }}</socketType> <!-- see <incomingServer> -->
        <username>{{ ACF_OUTGOING_UNAME }}</username><!-- if smtp-auth -->
            <!-- smtp-auth (RFC 2554, 4954) or other auth mechanism.
                For values, see incoming.
                Additional options here:
                "SMTP-after-POP":
                    authenticate to incoming mail server first
                    before contacting the smtp server.
            -->
        <authentication>{{ ACF_OUTGOING_AUTH }}</authentication>
        <!-- <password>optional: the user's password</password> -->
            <!-- If the server makes some additional requirements beyond <authentication>:
                "client-IP-address": The server is only reachable or works,
                    if the user is in a certain IP network, e.g.
                    the dialed into the ISP's network (DSL, cable, modem) or
                    connected to a company network.
                    Note: <authentication>client-IP-address</>
                    means that you may use the server without any auth.
                    <authentication>password-cleartext</> *and*
                    <restriction>client-IP-address</> means that you need to
                    be in the correct IP network *and* (should) authenticate.
                    Servers which do that are highly discouraged and
                    should be avoided, see \{\{bug|556267\}\}.
                Not yet implemented. Spec (element name?) up to change.
            -->
        <!-- <restriction>client-IP-address</restriction> -->
        <!-- remove the following and leave to client/user? -->
        <!-- <addThisServer>true</addThisServer> -->
        <!-- <useGlobalPreferredServer>true</useGlobalPreferredServer> -->
      </outgoingServer>

      <!-- A page where the ISP describes the configuration.
          This is purely informational and currently mainly for
          maintenance of the files and not used by the client at all.
          Note that we do not necessarily use exactly the config suggested
          by the ISP, e.g. when they don't recommend SSL, but it's available,
          we will configure SSL.
          The text content should contains a description in the native
          language of the ISP (customers), and a short English description,
          mostly for us.
      -->
<!--    <documentation url="http://www.example.com/help/mail/">
        <descr lang="en">Configure mail app for IMAP</descr>
        <descr lang="de">Email mit IMAP konfigurieren</descr>
      </documentation> -->

    </emailProvider>

    <!-- Syncronize the user's address book / contacts. -->
    <addressBook type="carddav">
      <username>{{ ACF_ADDBOOK_UNAME }}</username>
        <!-- Authentication methods. See also <incomingServer>.
              "http-basic":
                        Authenticate to the HTTP server using
                        WWW-Authenticate: Basic
              "http-digest":
                        Authenticate to the HTTP server using
                        WWW-Authenticate: Digest
              "OAuth2":
                        mAuth. Uses the same token as for email. <scope> needs to include
                         addressbook/calendar.
              -->
      <authentication>{{ ACF_ADDBOOK_AUTH }}</authentication>
      <serverURL>{{ ACF_ADDBOOK_URL }}</serverURL>
    </addressBook>

<!--<addressBook type="jmap">
      <username>%EMAILADDRESS%</username>
      <authentication>http-basic</authentication>
      <serverURL>https://jmap.example.com</serverURL>
    </addressBook> -->

    <!-- Syncronize the user's calendar. -->
    <calendar type="caldav">
      <username>{{ ACF_CAL_UNAME }}</username>
      <authentication>{{ ACF_CAL_AUTH }}</authentication> <!-- see <addressBook> -->
      <serverURL>{{ ACF_CAL_URL }}</serverURL>
    </calendar>

<!--<calendar type="jmap">
      <username>%EMAILADDRESS%</username>
      <authentication>http-basic</authentication> --> <!-- see <addressBook> -->
<!--  <serverURL>https://calendar.example.com</serverURL>
    </calendar> -->

    <!-- Upload files, allowing the user to share them.
        This can be used for Thunderbird's FileLink feature,
        or to set up a file sync folder on the user's desktop. -->
<!--<fileShare type="webdav">
      <username>%EMAILADDRESS%</username>
      <authentication>http-basic</authentication> --> <!-- see <addressBook> -->
<!--  <serverURL>https://share.example.com/remote.php/dav</serverURL>
    </fileShare> -->

    <!-- This allows to login in to the webmail service of the provider.
        The URLs are loaded into a standard webbrowser for the user.
        This is optional. -->
    <webMail>
      <!-- Webpage where the user has to log in manually by entering username
          and password himself.
          HTTPS required. -->
      <loginPage url="{{ ACF_WEB_URL }}" />

      <!-- Same as loginAutomaticDOM, but the website makes checks that
          the user comes from the login page. So, open the login page
          in the browser, get the page's DOM, fill out name and password
          fields for the user, and trigger the login button.
          The login button might not be an HTML button, just a div, so
          to trigger it, send a click event to it.
          HTTPS is required for the URL. -->
      <loginPageInfo url="{{  ACF_WEB_URL }}">
        <!-- What to fill into the usernameField.
            Format is the same as for <username> within <incomingServer>,
            including placeholders. See below for valid placeholders. -->
        <username>{{ ACF_WEB_UNAME }}</username>
        <!-- Allows to find the textfield on the page, to fill it out.
            The id attribute give the DOM ID,
            The name attribute give the DOM name attribute.
            One or both of id and name attributes must exist.
            Try the ID first (e.g. using getElementById()), if existing.
            Otherwise, try finding the element by name.
            Don't treat the IDs given in this XML file as trusted,
            but before using them, verify the format
            (e.g. only characters and digits for IDs).
            If you use powerful functions like jQuery, and the XML returns
            you code in the username ID, and you feed it unchecked to jQuery,
            it may be executed. -->
        <usernameField id="{{ ACF_WEB_UNAME_FIELD }}" name="{{ ACF_WEB_UNAME_FIELD }}" />
        <passwordField name="{{ ACF_WEB_PASS_FIELD  }}" />
        <!-- The submit button to trigger the server submit
            after filling in the fields.
            id and name attributes: See <usernameField> -->
        <loginButton id="submit_button" name="login"/>
      </loginPageInfo>
    </webMail>

    <!-- Ask user for custom input,
       and use them as placeholders in the values.
       Optional. -->
<!--<inputField key="USERNAME" label="Screen name"></inputField>
    <inputField key="GRANDMA" label="Grandma">Elise Bauer</inputField> -->

    <!-- oAuth2 specced for mail apps,
        e.g. clientID, expiry, and login page -->
<!--<mAuth>
      <authURL>https://login.example.com/common/oauth2/v2.0/authorize</authURL>
      <tokenURL>https://login.example.com/common/oauth2/v2.0/token</tokenURL>
      <issuer>login.example.com</issuer>
      <scope>imap pop3 smtp webdav caldav carddav offline_access</scope>
      <clientID>messaging</clientID>
      <clientSecret>notreally</clientSecret>
    </mAuth> -->

    <!-- Add this only when users (who already have an account) have to
        do something manually before the account can work with IMAP/POP or SSL.
        Note: Per XML, & (ampersand) needs to be escaped to
        & a m p ; (without spaces).
        Mandatory only if the ISP requires such settings
        before the configs above work. -->
<!--<enable 
      visiturl="https://mail.google.com/mail/?ui=2&amp;shva=1#settings/fwdandpop">
      <instruction>Check 'Enable IMAP and POP' in Google settings page</instruction>
      <instruction lang="de">Schalten Sie 'IMAP und POP aktivieren' auf der Google Einstellungs-Seite an</instruction>
    </enable>

    <clientConfigUpdate url="https://www.example.com/config/mail.xml" />
-->
</clientConfig>
